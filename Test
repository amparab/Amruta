SELECT 
  SUBSTR(your_column, 
         INSTR(your_column, '-', 1, 1) + 1, 
         INSTR(your_column, '-', 1, 2) - INSTR(your_column, '-', 1, 1) - 1) AS value1,
  SUBSTR(your_column, 
         INSTR(your_column, '-', 1, 2) + 1, 
         INSTR(your_column, '-', 1, 3) - INSTR(your_column, '-', 1, 2) - 1) AS value2,
  SUBSTR(your_column, 
         INSTR(your_column, '-', 1, 3) + 1, 
         INSTR(your_column, '-', 1, 4) - INSTR(your_column, '-', 1, 3) - 1) AS value3,
  SUBSTR(your_column, 
         INSTR(your_column, '-', 1, 4) + 1) AS value4
FROM your_table;


SELECT 
  REGEXP_SUBSTR(your_column, '[^-]+', 1, 2) AS value1,
  REGEXP_SUBSTR(your_column, '[^-]+', 1, 3) AS value2,
  REGEXP_SUBSTR(your_column, '[^-]+', 1, 4) AS value3,
  REGEXP_SUBSTR(your_column, '[^-]+', 1, 5) AS value4
FROM your_table;

import SimpleHTTPServer
import SocketServer

class MyRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            # Execute your script here
            # For demonstration purposes, let's assume the script returns a simple message
            message = "Script executed successfully!"
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(message)
        else:
            self.send_error(404, 'Not Found')

def run_server():
    host = 'localhost'
    port = 8000
    server = SocketServer.TCPServer((host, port), MyRequestHandler)
    print(f'Server running on http://{host}:{port}')
    server.serve_forever()

if __name__ == '__main__':
    run_server()




CURL


import subprocess

def execute_curl_command(curl_command):
    try:
        # Run the curl command
        output = subprocess.check_output(curl_command, shell=True)
        print("Curl command executed successfully.")
        print(output.decode())  # Print the output
    except subprocess.CalledProcessError as e:
        print("Error executing the curl command:")
        print(e.output.decode())

def main():
    # Specify your curl command
    curl_command = 'curl -X GET https://api.example.com'

    # Call the function to execute the curl command
    execute_curl_command(curl_command)

if __name__ == '__main__':
    main()




try:
        # Run the curl command
        output = subprocess.check_output(curl_command, shell=True)
        print("Curl command executed successfully.")

        # Parse the JSON response
        json_data = json.loads(output.decode())
        # Extract the value of a specific property
        property_value = json_data['property_name']
        print(f"Value of property_name: {property_value}")
    except subprocess.CalledProcessError as e:
        print("Error executing the curl command:")
        print(e.output.decode())



OS

import os

def remove_file(file_path):
    try:
        # Remove the file
        os.remove(file_path)
        print(f"File '{file_path}' removed successfully.")
    except OSError as e:
        print(f"Error removing file '{file_path}':")
        print(e)

def set_environment_variable(variable_name, variable_value):
    # Set the environment variable
    os.environ[variable_name] = variable_value
    print(f"Environment variable '{variable_name}' set to '{variable_value}'.")

def main():
    # Remove a file
    file_path = '/path/to/your/file.txt'
    remove_file(file_path)

    # Set an environment variable
    variable_name = 'MY_VARIABLE'
    variable_value = 'some_value'
    set_environment_variable(variable_name, variable_value)

if __name__ == '__main__':
    main()



urllib.request.urlretrieve(url, destination)
print("File downloaded successfully")


subprocess.run(['wget', url, '-O', destination], check=True)



@Test
    void testStaticMethod() {
        try (MockedStatic<YourClassWithStaticMethods> mockedStatic = mockStatic(YourClassWithStaticMethods.class)) {
            // Mock the static method behavior
            mockedStatic.when(() -> YourClassWithStaticMethods.yourStaticMethod()).thenReturn("Mocked Value");

            // Test your code that uses the static method
            // ...
        }
    }


import javax.xml.parsers.*;
import javax.xml.xpath.*;
import org.w3c.dom.*;
import java.io.File;

public class XmlParserNestedTagXPath {
    public static void main(String[] args) {
        try {
            File xmlFile = new File("data.xml");

            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(xmlFile);

            XPathFactory xPathFactory = XPathFactory.newInstance();
            XPath xPath = xPathFactory.newXPath();

            // Use XPath expression to get the value of the nested "child" tag
            String xPathExpression = "/root/parent/child";
            String nestedTagValue = xPath.evaluate(xPathExpression, document.getDocumentElement(), XPathConstants.STRING).toString();

            System.out.println("Value of nested 'child' tag: " + nestedTagValue);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


