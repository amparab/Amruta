private static byte[] toPrimitiveArray(Byte[] objectArray) {
        return IntStream.range(0, objectArray.length)
                .map(index -> objectArray[index])
                .mapToInt(Byte::intValue)
                .public class Trial {
    int count = 0;

    public int dupSub(Node root) {
        Map<String, Integer> map = new HashMap<>();
        traversal(root, map);
        return count;
    }

    public String traversal(Node root, Map<String, Integer> map) {
        if (root == null) return "null";

        String subtree = root.data + "," + traversal(root.left, map) + "," + traversal(root.right, map);

        if (root.left != null || root.right != null) {
            map.put(subtree, map.getOrDefault(subtree, 0) + 1);
            if (map.get(subtree) == 2) {
                count++;
            }
        }

        return subtree;
    }
}
