@Test
    public void testProcessEventWithValidMessage() throws JMSException {
        // Arrange
        JmsTemplate mockJmsTemplate = mock(JmsTemplate.class);
        publisher.setJmsTemplate(mockJmsTemplate);

        // Act
        boolean result = publisher.processEvent("ValidMessage");

        // Assert
        assertTrue(result);

        // Verify that convertAndSend is called with the correct arguments
        ArgumentCaptor<Object> messageCaptor = ArgumentCaptor.forClass(Object.class);
        ArgumentCaptor<MessagePostProcessor> postProcessorCaptor = ArgumentCaptor.forClass(MessagePostProcessor.class);
        verify(mockJmsTemplate).convertAndSend(messageCaptor.capture(), postProcessorCaptor.capture());

        assertEquals("ValidMessage", messageCaptor.getValue());

        // Create a mock Message for testing postProcessMessage
        Message mockMessage = mock(Message.class);

        // Act on postProcessMessage
        MessagePostProcessor postProcessor = postProcessorCaptor.getValue();
        Message processedMessage = postProcessor.postProcessMessage(mockMessage);

        // Assert postProcessMessage logic
        verify(mockMessage).setStringProperty("TEST", "Property");
        assertSame(mockMessage, processedMessage); // Ensure the same message instance is returned
    }
